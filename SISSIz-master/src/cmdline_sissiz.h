/** @file cmdline_sissiz.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.1
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_SISSIZ_H
#define CMDLINE_SISSIZ_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int nossr_flag;	/**< @brief No site specific rates (default=off).  */
  const char *nossr_help; /**< @brief No site specific rates help description.  */
  int flanks_arg;	/**< @brief Flanking sites.  */
  char * flanks_orig;	/**< @brief Flanking sites original value given at command line.  */
  const char *flanks_help; /**< @brief Flanking sites help description.  */
  char * outfile_arg;	/**< @brief Output filename.  */
  char * outfile_orig;	/**< @brief Output filename original value given at command line.  */
  const char *outfile_help; /**< @brief Output filename help description.  */
  int num_samples_arg;	/**< @brief Number of samples.  */
  char * num_samples_orig;	/**< @brief Number of samples original value given at command line.  */
  const char *num_samples_help; /**< @brief Number of samples help description.  */
  int num_samples_regression_arg;	/**< @brief Number of samples in regression.  */
  char * num_samples_regression_orig;	/**< @brief Number of samples in regression original value given at command line.  */
  const char *num_samples_regression_help; /**< @brief Number of samples in regression help description.  */
  double precision_arg;	/**< @brief Cut-off for mononucleotide content (Euclidean distance of frequency vector).  */
  char * precision_orig;	/**< @brief Cut-off for mononucleotide content (Euclidean distance of frequency vector) original value given at command line.  */
  const char *precision_help; /**< @brief Cut-off for mononucleotide content (Euclidean distance of frequency vector) help description.  */
  int simulate_flag;	/**< @brief Simulate only (default=off).  */
  const char *simulate_help; /**< @brief Simulate only help description.  */
  int verbose_flag;	/**< @brief verbose (default=off).  */
  const char *verbose_help; /**< @brief verbose help description.  */
  int mono_flag;	/**< @brief Mononucleotide (default=off).  */
  const char *mono_help; /**< @brief Mononucleotide help description.  */
  int di_flag;	/**< @brief Mononucleotide (default=on).  */
  const char *di_help; /**< @brief Mononucleotide help description.  */
  int dna_flag;	/**< @brief Print Us or Ts (default=on).  */
  const char *dna_help; /**< @brief Print Us or Ts help description.  */
  int rna_flag;	/**< @brief Print Us or Ts (default=off).  */
  const char *rna_help; /**< @brief Print Us or Ts help description.  */
  int tstv_flag;	/**< @brief Transition/Transversion ratio (default=on).  */
  const char *tstv_help; /**< @brief Transition/Transversion ratio help description.  */
  float kappa_arg;	/**< @brief kappa parameter.  */
  char * kappa_orig;	/**< @brief kappa parameter original value given at command line.  */
  const char *kappa_help; /**< @brief kappa parameter help description.  */
  int gamma_arg;	/**< @brief Categories for gamma for kappa ML estimation.  */
  char * gamma_orig;	/**< @brief Categories for gamma for kappa ML estimation original value given at command line.  */
  const char *gamma_help; /**< @brief Categories for gamma for kappa ML estimation help description.  */
  int print_tree_flag;	/**< @brief Print estimated tree  (default=off).  */
  const char *print_tree_help; /**< @brief Print estimated tree  help description.  */
  int print_rates_flag;	/**< @brief Print rates to file (debugging) (default=off).  */
  const char *print_rates_help; /**< @brief Print rates to file (debugging) help description.  */
  int clustal_flag;	/**< @brief Output format CLUSTAL W (default=on).  */
  const char *clustal_help; /**< @brief Output format CLUSTAL W help description.  */
  int maf_flag;	/**< @brief Output format MAF (default=off).  */
  const char *maf_help; /**< @brief Output format MAF help description.  */
  int fasta_flag;	/**< @brief Output format FASTA (default=off).  */
  const char *fasta_help; /**< @brief Output format FASTA help description.  */
  int oldAliEn_flag;	/**< @brief use old alifold energies (with gaps) (default=off).  */
  const char *oldAliEn_help; /**< @brief use old alifold energies (with gaps) help description.  */
  int ribo_flag;	/**< @brief use ribosum matrices (default=off).  */
  const char *ribo_help; /**< @brief use ribosum matrices help description.  */

  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int nossr_given ;	/**< @brief Whether nossr was given.  */
  unsigned int flanks_given ;	/**< @brief Whether flanks was given.  */
  unsigned int outfile_given ;	/**< @brief Whether outfile was given.  */
  unsigned int num_samples_given ;	/**< @brief Whether num-samples was given.  */
  unsigned int num_samples_regression_given ;	/**< @brief Whether num-samples-regression was given.  */
  unsigned int precision_given ;	/**< @brief Whether precision was given.  */
  unsigned int simulate_given ;	/**< @brief Whether simulate was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int mono_given ;	/**< @brief Whether mono was given.  */
  unsigned int di_given ;	/**< @brief Whether di was given.  */
  unsigned int dna_given ;	/**< @brief Whether dna was given.  */
  unsigned int rna_given ;	/**< @brief Whether rna was given.  */
  unsigned int tstv_given ;	/**< @brief Whether tstv was given.  */
  unsigned int kappa_given ;	/**< @brief Whether kappa was given.  */
  unsigned int gamma_given ;	/**< @brief Whether gamma was given.  */
  unsigned int print_tree_given ;	/**< @brief Whether print-tree was given.  */
  unsigned int print_rates_given ;	/**< @brief Whether print-rates was given.  */
  unsigned int clustal_given ;	/**< @brief Whether clustal was given.  */
  unsigned int maf_given ;	/**< @brief Whether maf was given.  */
  unsigned int fasta_given ;	/**< @brief Whether fasta was given.  */
  unsigned int oldAliEn_given ;	/**< @brief Whether oldAliEn was given.  */
  unsigned int ribo_given ;	/**< @brief Whether ribo was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_SISSIZ_H */
